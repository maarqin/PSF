package beans;

import controllers.ColegiadoJpaController;
import controllers.DocumentoJpaController;
import controllers.SolicitacaoJpaController;
import controllers.UsuarioJpaController;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.http.Part;
import models.Documento;
import models.Solicitacao;
import models.Usuario;
import org.apache.commons.io.IOUtils;
import org.primefaces.context.RequestContext;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.event.FlowEvent;
import org.primefaces.event.SelectEvent;

/**
 *
 * @author a
 */
@ManagedBean
@SessionScoped
public class SolicitacaoBean extends DocumentoBean {

    Solicitacao solicitacao;
    Documento documento;
    Usuario usuario, atendente;

    SolicitacaoJpaController controllerSolicitacao;
    DocumentoJpaController controllerDocumento;
    UsuarioJpaController controllerUsuario;
    ColegiadoJpaController controllerColegiado;

    private int idUsuario, idSolicitacao, numProtocolo;
    private String estado, periodoAplicacao, turma, nomeArquivo;
    private Date dataAplicacao, dataCriacao;
    List<Solicitacao> listaSolicitacoes;
    private javax.servlet.http.Part arquivo;
    private final String PATH = "C:/Users/Guti Ivanagava/Documents/NetBeansProjects/PSF/uploads";

    public SolicitacaoBean() {
        controllerDocumento = new DocumentoJpaController();
        controllerSolicitacao = new SolicitacaoJpaController();
        controllerUsuario = new UsuarioJpaController();

        FacesContext fc = FacesContext.getCurrentInstance();
        HttpSession session = (HttpSession) fc.getExternalContext().getSession(true);
        idUsuario = (int) session.getAttribute("USUARIO_LOGADO_ID");
        usuario = controllerUsuario.findUsuario(idUsuario);
        solicitacao = new Solicitacao();

    }

    public String escoherArquivo(ActionEvent submit) {
        Solicitacao sol = new Solicitacao(Integer.MIN_VALUE, Integer.MIN_VALUE, dataAplicacao, periodoAplicacao, dataCriacao, "Pendente", turma);
        
        try {
            sol.setDocumentoList(getListaDocumentos());

            controllerSolicitacao.create(sol);
            dataAplicacao = null;
            periodoAplicacao = "";
            dataCriacao = null;
            turma = "";
            listaDocumentos.clear();
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Solicitação enviada com sucesso!", ""));

        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Pãn.", ""));
            e.printStackTrace();
        }

        try {

        } catch (Exception e) {
        }
        return "";
    }

    private String CriarPasta() {
        FacesContext fc = FacesContext.getCurrentInstance();
        HttpSession session = (HttpSession) fc.getExternalContext().getSession(true);
        String usuarioNome = (String) session.getAttribute("USUARIO_LOGADO_NOME");
        String pasta = PATH + "/" + usuarioNome + "/";

        try {

            if (!new File(pasta).exists()) { // Verifica se o diretório existe.   
                (new File(pasta)).mkdir();   // Cria o diretório   
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return pasta;
    }

    public String downloadArquivo(ActionEvent submit) throws FileNotFoundException {
        FacesContext fc = FacesContext.getCurrentInstance();
        Map<String, String> params = fc.getExternalContext().getRequestParameterMap();
        String dataDownload = params.get("alvo");
        System.out.println("" + dataDownload);

        File file = new File(PATH + dataDownload);
        HttpServletResponse response = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext().getResponse();

        response.setHeader("Content-Disposition", "attachment;filename=" + dataDownload);
        response.setContentLength((int) file.length());
        ServletOutputStream out = null;
        try {
            FileInputStream input = new FileInputStream(file);
            byte[] buffer = new byte[1024];
            out = response.getOutputStream();
            int i = 0;
            while ((i = input.read(buffer)) != -1) {
                out.write(buffer);
                out.flush();
            }
            FacesContext.getCurrentInstance().getResponseComplete();
        } catch (IOException err) {
            err.printStackTrace();
        } finally {
            try {
                if (out != null) {
                    out.close();
                }
            } catch (IOException err) {
                err.printStackTrace();
            }
        }

        return "";
    }

//    public SolicitacaoBean() {
//        controllerSolicitacao = new SolicitacaoJpaController();
//        controllerDocumento = new DocumentoJpaController();
//        controllerUsuario = new UsuarioJpaController();
//        controllerColegiado = new ColegiadoJpaController();
//        dataAplicacao = new Date();
//        dataCriacao = new Date();
////        listaDocumentos = new ArrayList();
//        listaSolicitacoes = new ArrayList();
//
//        FacesContext fc = FacesContext.getCurrentInstance();
//        HttpSession session = (HttpSession) fc.getExternalContext().getSession(true);
////        idUsuario = (int) session.getAttribute("USUARIO_LOGADO_ID");
//        usuario = controllerUsuario.findUsuario(22);
//        solicitacao = new Solicitacao();
//    }

    public String novaSolicitacao(ActionEvent Submit) {
        Solicitacao obj = new Solicitacao();
        Calendar calendar = Calendar.getInstance();

        obj.setIdsolicitacao(Integer.MIN_VALUE);
        obj.setNumprotocolo(obj.getIdsolicitacao());
        obj.setDataaplicacao(dataAplicacao);
        obj.setPeriodoaplicacao(periodoAplicacao);
        obj.setDatacriacao(calendar.getTime());
        obj.setEstado("Solicitado");
        obj.setTurma(turma);
        obj.setUsuarioIdusuario(usuario);
        obj.setAtendente(null);

        try {
//            obj.setDocumentoList(getListaDocumentos());

            controllerSolicitacao.create(obj);
            obj = null;
//            listaSolicitacoes.clear();
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Solicitação enviada com sucesso", ""));
            

        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Erro ao criar uma solicitação.", ""));
            e.printStackTrace();
        }
        return "";
    }

    public void apagarSolicitacao(int idSolicitacao) {
        controllerSolicitacao = new SolicitacaoJpaController();
        try {
            controllerSolicitacao.destroy(idSolicitacao);
        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Um ou mais campos não estão preenchidos corretamente!", ""));
        }
    }

    public List<Solicitacao> listaDoProfessor() {
        List<Solicitacao> lista = new ArrayList();
        lista = controllerUsuario.selectAllSolicitacoes(usuario);
        return lista;
    }

    public List<Documento> listaDoscumentosSelecionado() {

        List<Documento> lista = new ArrayList();
        try {

            lista = solicitacao.getDocumentoList();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return lista;
    }

    public String mudarEstadoSolicitacao() {
        FacesContext fc = FacesContext.getCurrentInstance();
        Map<String, String> params = fc.getExternalContext().getRequestParameterMap();
        String datap = params.get("idSolicitacao");
        String estadop = params.get("estadoSolicitacao");
        Solicitacao temp = controllerSolicitacao.findSolicitacao(Integer.parseInt(datap));
        Usuario user = controllerUsuario.findUsuario(temp.getUsuarioIdusuario().getIdusuario());
        temp.setEstado(estadop);
        try {
            controllerSolicitacao.edit(temp);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Solicitação alterada com sucesso!", ""));
        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Erro na alteração da solicitação.", ""));
            e.printStackTrace();
        }
        return "";
    }

    public void encontrarSolicitacao(ActionEvent submit) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Map<String, String> params = fc.getExternalContext().getRequestParameterMap();
        String data = params.get("idSolicitacao");
        if (!data.equals(null)) {
            solicitacao = controllerSolicitacao.findSolicitacao(Integer.parseInt(data));
        }

    }

    public List<Solicitacao> listaSolicitacoes() {
        List<Solicitacao> lista = new ArrayList();
        lista = controllerSolicitacao.selectAll();
        return lista;
    }

//<editor-fold defaultstate="collapsed" desc="calendar">
    public void onDateSelect(SelectEvent event) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Date Selected", format.format(event.getObject())));
    }

    public void click() {
        RequestContext requestContext = RequestContext.getCurrentInstance();

        requestContext.update("form:display");
        requestContext.execute("PF('dlg').show()");
    }
    //</editor-fold>

//<editor-fold defaultstate="collapsed" desc="get set">
    public String getEstado() {
        return estado;
    }

    public void setEstado(String estado) {
        this.estado = estado;
    }

    public String onFlowProcess(FlowEvent event) {

        return event.getNewStep();

    }

    public Solicitacao getSolicitacao() {
        return solicitacao;
    }

    public void setSolicitacao(Solicitacao solicitacao) {
        this.solicitacao = solicitacao;
    }

    public Documento getDocumento() {
        return documento;
    }

    public void setDocumento(Documento documento) {
        this.documento = documento;
    }

    public Usuario getUsuario() {
        return usuario;
    }

    public void setUsuario(Usuario usuario) {
        this.usuario = usuario;
    }

    public SolicitacaoJpaController getControllerSolicitacao() {
        return controllerSolicitacao;
    }

    public void setControllerSolicitacao(SolicitacaoJpaController controllerSolicitacao) {
        this.controllerSolicitacao = controllerSolicitacao;
    }

    public UsuarioJpaController getControllerUsuario() {
        return controllerUsuario;
    }

    public void setControllerUsuario(UsuarioJpaController controllerUsuario) {
        this.controllerUsuario = controllerUsuario;
    }

    public int getIdUsuario() {
        return idUsuario;
    }

    public void setIdUsuario(int idUsuario) {
        this.idUsuario = idUsuario;
    }

//    public List<Solicitacao> getListaSolicitacoes() {
//        return listaSolicitacoes;
//    }
//
//    public void setListaSolicitacoes(List<Solicitacao> listaSolicitacoes) {
//        this.listaSolicitacoes = listaSolicitacoes;
//    }
    public Date getDataAplicacao() {
        return dataAplicacao;
    }

    public void setDataAplicacao(Date dataAplicacao) {
        this.dataAplicacao = dataAplicacao;
    }

    public String getPeriodoAplicacao() {
        return periodoAplicacao;
    }

    public void setPeriodoAplicacao(String periodoAplicacao) {
        this.periodoAplicacao = periodoAplicacao;
    }

    public String getTurma() {
        return turma;
    }

    public void setTurma(String turma) {
        this.turma = turma;
    }

    public Usuario getAtendente() {
        return atendente;
    }

    public void setAtendente(Usuario atendente) {
        this.atendente = atendente;
    }

    public int getIdSolicitacao() {
        return idSolicitacao;
    }

    public void setIdSolicitacao(int idSolicitacao) {
        this.idSolicitacao = idSolicitacao;
    }

    public int getNumProtocolo() {
        return numProtocolo;
    }

    public void setNumProtocolo(int numProtocolo) {
        this.numProtocolo = numProtocolo;
    }

    public Date getDataCriacao() {
        return dataCriacao;
    }

    public void setDataCriacao(Date dataCriacao) {
        this.dataCriacao = dataCriacao;
    }

//</editor-fold>
    public Part getArquivo() {
        return arquivo;
    }

    public void setArquivo(Part arquivo) {
        this.arquivo = arquivo;
    }

    public String getNomeArquivo() {
        return nomeArquivo;
    }

    public void setNomeArquivo(String nomeArquivo) {
        this.nomeArquivo = nomeArquivo;
    }

    public List<Documento> getListaDocumentos() {
        return listaDocumentos;
    }

    public void setListaDocumentos(List<Documento> listaDocumentos) {
        this.listaDocumentos = listaDocumentos;
    }

}
